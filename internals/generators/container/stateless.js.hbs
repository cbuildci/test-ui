/**
 * {{properCase name }}
 */

import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { compose, bindActionCreators } from 'redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from 'utils/injectReducer';
import select{{properCase name}} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

function {{ properCase name }}() {
    return (
        <div>
        {{#if wantHeaders}}
            <Helmet>
                <title>{{properCase name}}</title>
                <meta name="description" content="Description of {{properCase name}}" />
            </Helmet>
        {{/if}}
        {{#if wantMessages}}
            <FormattedMessage {...messages.header} />
        {{/if}}
        </div>
    );
}

// {{ properCase name }}.propTypes = {};
// {{ properCase name }}.defaultProps = {};

{{#if wantActionsAndReducer}}
function mapStateToProps(state, ownProps) {
    return {
        // Route params
        // myparam: ownProps.match.params.myparam,

        // Store values
        {{ lowerCase name }}: select{{properCase name}},
    };
}
{{/if}}

const mapDispatchToProps = (dispatch, ownProps) => bindActionCreators({
    // Example using route params.
    // onMyEvent: () => myActionCreator(
    //     ownProps.match.params.owner,
    // ),
}, dispatch);

function mergeProps(stateProps, dispatchProps) {
    return {
        ...stateProps,
        ...dispatchProps,

        // Pass through props by adding "ownProps" as third argument to mergeProps.
        // myProp: ownProps.myProp,
    };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(
    mapStateToProps,
    mapDispatchToProps,
    mergeProps,
);

const withReducer = injectReducer({ key: '{{ lowerCase name }}', reducer });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ lowerCase name }}', saga });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
    withReducer,
{{/if}}
{{#if wantSaga}}
    withSaga,
{{/if}}
    withConnect,
)({{ properCase name }});
